{"version":3,"sources":["webpack:///./task1/task-1.js","webpack:///./task2/task-2.js","webpack:///./task3/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","result","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAEMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACTD,EAAQF,KACPA,OAICI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,QAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbfK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAACC,GAOlBA,EALqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAW7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAK7CL,EAAgBH,EAAO,SACvBG,EAAgBH,EAAO,OAKvBG,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GClCrC,IAIQe,EAAkB,SAACC,GAEvB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAC3B,IAP6BC,EAAKC,EAO5BxB,GAPuBuB,EAOW,IAPNC,EAOW,IANxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAQhDnB,YAAW,WAGX,GAFmBqB,KAAKE,SAAW,GAEnB,CACd,IAAMC,EAAS,CAACC,GAAIR,EAAYQ,GAAIvB,KAAMN,GAC1CG,EAAQyB,QAERN,EAAOD,EAAYQ,MAEpB7B,OAID8B,EAAa,SAACF,GAElBrB,QAAQC,IAAR,eAA2BoB,EAAOC,GAAlC,iBAAqDD,EAAOtB,KAA5D,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAMFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAClCb,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAClCb,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAClCb,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAIlCb,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.d4b244645281e25fff7b.js","sourcesContent":["//========================================== Task 1\r\n\r\nconst delay = ms => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(ms);\r\n      }, ms);\r\n    });\r\n    };\r\n    \r\n    const logger = time => console.log(`Resolved after ${time} ms`);\r\n\r\n    // Вызовы функции для проверки\r\n    delay(2000).then(logger); // Resolved after 2000ms\r\n    delay(1000).then(logger); // Resolved after 1000ms\r\n    delay(1500).then(logger); // Resolved after 1500ms","//========================================== Task 2\r\n\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve) => {\r\n  \r\n      const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n  \r\n      );\r\n  \r\n      resolve(updatedUsers);\r\n    });\r\n      \r\n  \r\n    //callback(updatedUsers);\r\n  };\r\n  \r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n  \r\n  /*\r\n   * Сейчас работает так\r\n   */\r\n  toggleUserState(users, 'Mango', logger);\r\n  toggleUserState(users, 'Lux', logger);\r\n  \r\n  /*\r\n   * Должно работать так\r\n   */\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);","//========================================== Task 3\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  const makeTransaction = (transaction) => {\r\n  \r\n    return new Promise((resolve, reject) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n      \r\n        setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n    \r\n        if (canProcess) {\r\n          const result = {id: transaction.id, time: delay};\r\n          resolve(result);\r\n        } else {\r\n          reject(transaction.id);\r\n        }\r\n      }, delay);\r\n    });\r\n  };\r\n  \r\n  const logSuccess = (result) => {\r\n   \r\n    console.log(`Transaction ${result.id} processed in ${result.time}ms`);\r\n  };\r\n  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n  /*\r\n   * Работает так\r\n   */\r\n  makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n  makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n  makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n  makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n  /*\r\n   * Должно работать так\r\n   */\r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"sourceRoot":""}